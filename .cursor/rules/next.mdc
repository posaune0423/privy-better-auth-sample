---
globs: *.tsx
alwaysApply: false
---

# Nextjs Coding Rules

## 1. コンポーネントの命名規則

### Pageコンポーネント

target: `src/app/**/page.tsx`

`default expor`tしなきゃいけないので`NextPage`の型を使いparamsはawaitで受け取る

```tsx
interface PageComponentProps {
  params: {
    slug: string;
  };
}

const PageComponent: NextPage<PageComponentProps> = async ({ params }) => {
  const { slug } = await params;
  return <div>PageComponent</div>;
};

export default PageComponent;
```

### コンポーネント

`React.FC`を使い、named exportする

```tsx
export const Component: React.FC<ComponentProps> = ({ prop }) => {
  return <div>Component</div>;
};
```

## 2. ルール

- なるべくServer componentを使う
- userのinteractやclient側でのdata fetchがどうしても必要な場合のみClient componentを使う
- client componentの大きさはできる限り小さく、userのinteractする部分のみを切り出す事を考える
- Composition Patternをうまく活用しClient componentを最小限にして下さい。
  - 例えば`Tab`などuserのinteractによってその子コンポーネントが切り替わるような場合は、Composition Patternを使い、Tabの部分をclient componentにその中身はServer componentにする
- ファイル名は基本的に`kebab-case`で作成して下さい

## 3. Composition Pattern

Client componentからServer componentを読み込むことはできない一方で、SCをpropsとしてCCに渡すこと（Composition Pattern）はできます。

```tsx
import ClientComponent from "./client-component";
import ServerComponent from "./server-component";

export const CompositionPatternComponent = () => {
  return (
    <ClientComponent>
      <ServerComponent />
    </ClientComponent>
  );
};
```
